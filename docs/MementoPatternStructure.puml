@startuml MementoPatternStructure
!theme plain
skinparam backgroundColor #FEFEFE
skinparam classBackgroundColor #F8F9FA
skinparam classBorderColor #333333
skinparam arrowColor #0066CC

title Memento Design Pattern - Anime Form Draft System

package "Core Pattern" {
    class AnimeFormMemento {
        - state: AnimeFormState
        + constructor(state: AnimeFormState)
        + getState(): AnimeFormState
        + getTimestamp(): number
        + getPageName(): string
    }

    class AnimeFormOriginator {
        - currentState: AnimeFormState
        + constructor()
        - getDefaultState(): AnimeFormState
        + setState(state: Partial<AnimeFormState>): void
        + getState(): AnimeFormState
        + createMemento(): AnimeFormMemento
        + restoreFromMemento(memento: AnimeFormMemento): void
        + hasSignificantChanges(): boolean
    }

    class AnimeFormCaretaker {
        - mementos: Map<string, AnimeFormMemento>
        - maxMementos: number = 10
        - storageKey: string = 'anime_form_drafts'
        + constructor()
        + saveMemento(key: string, memento: AnimeFormMemento): void
        + getMemento(key: string): AnimeFormMemento | null
        + getAllDrafts(): Array<{key: string, memento: AnimeFormMemento}>
        + deleteDraft(key: string): boolean
        + clearAllDrafts(): void
        - cleanup(): void
        - saveToStorage(): void
        - loadFromStorage(): void
        + generateDraftKey(movieName: string): string
    }
}

package "React Integration" {
    class useDraftManager {
        + saveDraft(name?: string): string
        + loadDraft(key: string): void
        + deleteDraft(key: string): void
        + clearAllDrafts(): void
        + enableAutoSave(interval?: number): void
        + disableAutoSave(): void
        + getAllDrafts(): Array<{key: string, memento: AnimeFormMemento}>
        + hasUnsavedChanges(): boolean
        + updateFormState(state: Partial<AnimeFormState>): void
        + getCurrentState(): AnimeFormState
        + restoreState(setters: FormSetters): void
    }

    class DraftManager {
        + props: DraftManagerProps
        - formatDate(timestamp: number): string
        - getDraftPreview(memento: AnimeFormMemento): object
        - handleSaveDraft(): void
        - handleLoadDraft(key: string): void
        - handleDeleteDraft(key: string): void
        - handleClearAll(): void
        + render(): JSX.Element
    }

    class AddNewAnime {
        - state: FormState
        - draftManager: useDraftManager
        + onSubmit(): void
        + handleLoadDraft(key: string): void
        + handleSaveDraft(name?: string): string
        + render(): JSX.Element
    }
}

package "Data Types" {
    interface AnimeFormState {
        landspaceImage: any[]
        coverImage: any[]
        movieName: string
        description: string
        genreSelected: any[]
        publisher: string
        weeklyTime: string
        ageFor: any
        episodeList: any[]
        timestamp: number
        pageName: string
    }

    interface FormSetters {
        setLandspaceImage: (value: any[]) => void
        setCoverImage: (value: any[]) => void
        setMovieName: (value: string) => void
        setDescription: (value: string) => void
        setGenreSelected: (value: any[]) => void
        setPublisher: (value: string) => void
        setWeeklyTime: (value: string) => void
        setAgeFor: (value: any) => void
        setEpisodeList: (value: any[]) => void
    }
}

package "Utilities" {
    class draftSystemUtils {
        + clearAllDraftData(): void
        + validateDraftData(): boolean
        + repairDraftSystem(): void
        + getDraftSystemInfo(): object
        + emergencyReset(): void
    }
}

package "External Storage" {
    database localStorage {
        key: anime_form_drafts
        value: JSON Array of Drafts
    }
}

' Relationships
AnimeFormOriginator --> AnimeFormMemento : creates
AnimeFormCaretaker --> AnimeFormMemento : stores/retrieves
AnimeFormCaretaker --> localStorage : persists to
useDraftManager --> AnimeFormOriginator : uses
useDraftManager --> AnimeFormCaretaker : uses
AddNewAnime --> useDraftManager : uses
DraftManager --> useDraftManager : uses
AnimeFormMemento --> AnimeFormState : encapsulates
useDraftManager --> FormSetters : uses
draftSystemUtils --> localStorage : repairs

' Pattern relationships
AnimeFormOriginator ..> AnimeFormMemento : <<creates>>
AnimeFormCaretaker ..> AnimeFormMemento : <<manages>>

note right of AnimeFormMemento
  **Memento**
  - Stores immutable snapshot
  - Provides access to state
  - Maintains metadata
end note

note right of AnimeFormOriginator
  **Originator**
  - Creates mementos
  - Restores from mementos
  - Manages current state
end note

note right of AnimeFormCaretaker
  **Caretaker**
  - Manages memento collection
  - Handles persistence
  - Provides draft operations
end note

@enduml
