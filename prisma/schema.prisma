generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URI")
}

type AnimeepisodesComments {
  id       String?                        @map("_id") @db.ObjectId
  avatar   String?
  content  String
  likes    String[]
  replies  AnimeepisodesCommentsReplies[]
  /// Multiple data types found: String: 5.6%, String (ObjectId): 94.4% out of 18 sampled entries
  userId   Json
  userName String?
}

type AnimeepisodesCommentsReplies {
  id       String?  @map("_id") @db.ObjectId
  avatar   String?
  content  String
  likes    String[]
  /// Could not determine type: the field only had null or empty values in the sample set.
  replies  Json?
  userId   String   @db.ObjectId
  userName String?
}

type ChallengesQuestionCollection {
  answers         String[]
  correctAnswerID Int
  mediaUrl        String
  questionId      String   @db.ObjectId
  questionName    String
}

type ComicchaptersComments {
  id        String                         @map("_id") @db.ObjectId
  avatar    String
  content   String
  createdAt DateTime?                      @db.Date
  likes     String[]
  replies   ComicchaptersCommentsReplies[]
  userId    String                         @db.ObjectId
  userName  String
}

type ComicchaptersCommentsReplies {
  id       String   @map("_id") @db.ObjectId
  avatar   String
  content  String
  likes    String[]
  userId   String   @db.ObjectId
  userName String
}

type DonatepackagesDonateRecords {
  datetime DateTime @db.Date
  userId   String
}

type UsersAuthentication {
  password     String
  salt         String
  sessionToken String
}

type UsersBookmarkList {
  comic  String[]
  movies String[]
}

type UsersChallenges {
  date  String
  point Int
  time  Int
}

type UsersHistories {
  readingComic  UsersHistoriesReadingComic[]
  watchingMovie UsersHistoriesWatchingMovie[]
}

type UsersHistoriesReadingComic {
  chapterId String @db.ObjectId
}

type UsersHistoriesWatchingMovie {
  episodeId String @db.ObjectId
  position  Int
}

type UsersNotifications {
  content  String
  sentTime DateTime @db.Date
  /// Multiple data types found: String: 25.6%, String (ObjectId): 74.4% out of 90 sampled entries
  sourceId Json
  status   String
  type     String
}

type UsersQuestLog {
  finalTime            DateTime @db.Date
  hasReceivedDailyGift Boolean
  /// Multiple data types found: Int: 66.7%, BigInt: 33.3% out of 6 sampled entries
  readingTime          Json
  /// Could not determine type: the field only had null or empty values in the sample set.
  received             Json?
  /// Multiple data types found: Int: 66.7%, BigInt: 33.3% out of 6 sampled entries
  watchingTime         Json
}

model advertisementportalhistories {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  v             Int      @map("__v")
  episodeList   String[]
  ep_odeList    String[] @map("ep√≠odeList")
  linkUrl       String
  orderDate     DateTime @db.Date
  paymentMethod String
  price         Int
  status        String
  userId        String
  videoUrl      String
}

model advertisements {
  id             String @id @default(auto()) @map("_id") @db.ObjectId
  v              Int    @map("__v")
  adVideoUrl     String
  amount         Int?
  forwardLink    String
  pricePerAd     Int?
  representative String
}

model animealbums {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  albumName String
  animeList String[]
}

model animeepisodes {
  id            String                  @id @default(auto()) @map("_id") @db.ObjectId
  v             Int?                    @map("__v")
  advertisement String?                 @db.ObjectId
  comments      AnimeepisodesComments[]
  content       String
  coverImage    String
  episodeName   String
  likes         String[]
  publicTime    DateTime                @db.Date
  totalTime     Int
  views         Int
}

model animes {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  v              Int?     @map("__v")
  ageFor         String
  coverImage     String
  description    String
  episodes       String[]
  genres         String[]
  landspaceImage String
  movieName      String
  publishTime    String
  publisher      String
}

model avatars {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  avatarList     String[]
  collectionName String
}

model banners {
  id   String   @id @default(auto()) @map("_id") @db.ObjectId
  v    Int      @map("__v")
  list String[]
  type String
}

model challenges {
  id                 String                         @id @default(auto()) @map("_id") @db.ObjectId
  challengeName      String
  endTime            DateTime                       @db.Date
  questionCollection ChallengesQuestionCollection[]
}

model comicalbums {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  albumName String
  comicList String[]
}

model comicchapters {
  id           String                  @id @default(auto()) @map("_id") @db.ObjectId
  v            Int?                    @map("__v")
  chapterName  String
  comments     ComicchaptersComments[]
  content      String[]
  coverImage   String
  likes        String[]
  publicTime   DateTime                @db.Date
  unlockPrice  Int
  /// Could not determine type: the field only had null or empty values in the sample set.
  userUnlocked Json?
  views        Int
}

model comics {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  ageFor         String?
  artist         String
  author         String
  chapterList    String[]
  comicName      String
  coverImage     String
  description    String
  genres         String[]
  landspaceImage String
  newChapterTime String
  publisher      String
}

model credentials {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  v         Int      @map("__v")
  createdAt DateTime @db.Date
  loginid   String
  password  String
  role      String
  status    String
  updatedAt DateTime @db.Date
  username  String
}

model dailyquests {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  prize        Int
  questName    String
  questType    String
  requiredTime Int
}

model donatepackages {
  id            String                        @id @default(auto()) @map("_id") @db.ObjectId
  v             Int?                          @map("__v")
  coin          Int
  coverImage    String
  donateRecords DonatepackagesDonateRecords[]
  subTitle      String?
  title         String
}

model genres {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  genreName String
}

model paymenthistories {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  v             Int       @map("__v")
  orderDate     DateTime? @db.Date
  packageId     String?
  paymentMethod String
  price         Int
  status        String
  userId        String
}

model skycoinpackages {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  packageName String
  price       BigInt
  quantity    Int
}

model userreports {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  v                Int      @map("__v")
  commentId        String   @db.ObjectId
  destinationId    String   @db.ObjectId
  reportContent    String
  reportTime       DateTime @db.Date
  status           String
  type             String
  userBeReportedId String   @db.ObjectId
  userReportedId   String   @db.ObjectId
}

model users {
  id                String               @id @default(auto()) @map("_id") @db.ObjectId
  v                 Int?                 @map("__v")
  accessCommentDate DateTime             @db.Date
  authentication    UsersAuthentication?
  avatar            String
  bookmarkList      UsersBookmarkList
  challenges        UsersChallenges[]
  /// Multiple data types found: Int: 83.3%, BigInt: 16.7% out of 6 sampled entries
  coinPoint         Json
  deviceToken       String?
  histories         UsersHistories
  notifications     UsersNotifications[]
  paymentHistories  String[]
  phone             String
  questLog          UsersQuestLog
  username          String
}
